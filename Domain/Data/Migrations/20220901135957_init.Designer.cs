// <auto-generated />
using System;
using ERegister.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERegister.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220901135957_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdministrativeUnitsWorks", b =>
                {
                    b.Property<int>("AdministrativeUnitsId")
                        .HasColumnType("int");

                    b.Property<int>("WorksId")
                        .HasColumnType("int");

                    b.HasKey("AdministrativeUnitsId", "WorksId");

                    b.HasIndex("WorksId");

                    b.ToTable("AdministrativeUnitsWorks");
                });

            modelBuilder.Entity("Domain.Data.Entities.ActualStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActualStatuses");
                });

            modelBuilder.Entity("Domain.Data.Entities.Addresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<int?>("BlocksId")
                        .HasColumnType("int");

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<int?>("HousesId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NeigborhoodId")
                        .HasColumnType("int");

                    b.Property<int?>("NeigborhoodsId")
                        .HasColumnType("int");

                    b.Property<int?>("PollCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("PollCentersId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetsId")
                        .HasColumnType("int");

                    b.Property<int?>("VilagesId")
                        .HasColumnType("int");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlocksId");

                    b.HasIndex("HousesId");

                    b.HasIndex("MunicipalitiesId");

                    b.HasIndex("NeigborhoodsId");

                    b.HasIndex("PollCentersId");

                    b.HasIndex("StreetsId");

                    b.HasIndex("VilagesId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.AdministrativeUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdministrativeUnits");
                });

            modelBuilder.Entity("Domain.Data.Entities.Blocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MunicipalitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalitiesId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Domain.Data.Entities.DemandsSpecified", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppliactionUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppliactionUsersId");

                    b.ToTable("DemandsSpecifieds");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralDemands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralDemands");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralDemands_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GeneralDemandId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralDemandsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUsersId");

                    b.HasIndex("GeneralDemandsId");

                    b.ToTable("GeneralDemands_Users");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralReasons");
                });

            modelBuilder.Entity("Domain.Data.Entities.Helps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivitiesYouPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanYouManage")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedHelp")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("Domain.Data.Entities.Houses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Domain.Data.Entities.Municipalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionsId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Domain.Data.Entities.Neigborhoods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MunicipalitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalitiesId");

                    b.ToTable("Neigborhoods");
                });

            modelBuilder.Entity("Domain.Data.Entities.PoliticalSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoliticalSubjects");
                });

            modelBuilder.Entity("Domain.Data.Entities.PollCenters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CenterNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PollCenters");
                });

            modelBuilder.Entity("Domain.Data.Entities.PollRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FamMember")
                        .HasColumnType("int");

                    b.Property<int?>("HelpId")
                        .HasColumnType("int");

                    b.Property<int?>("HelpsId")
                        .HasColumnType("int");

                    b.Property<int?>("PoliticalSubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("PoliticalSubjectsId")
                        .HasColumnType("int");

                    b.Property<int?>("SuccessChancesId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("HelpsId");

                    b.HasIndex("PoliticalSubjectsId");

                    b.HasIndex("SuccessChancesId");

                    b.ToTable("PollRelateds");
                });

            modelBuilder.Entity("Domain.Data.Entities.Reasons_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GeneralReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralReasonsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUsersId");

                    b.HasIndex("GeneralReasonsId");

                    b.ToTable("Reasons_Users");
                });

            modelBuilder.Entity("Domain.Data.Entities.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.Data.Entities.SpecificReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.ToTable("SpecificReasons");
                });

            modelBuilder.Entity("Domain.Data.Entities.Streets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StreetSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("StreetSourcesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetSourcesId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Domain.Data.Entities.StreetSources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StreetSources");
                });

            modelBuilder.Entity("Domain.Data.Entities.SuccessChances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SuccessChances");
                });

            modelBuilder.Entity("Domain.Data.Entities.Vilages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MunicipalitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalitiesId");

                    b.ToTable("Vilages");
                });

            modelBuilder.Entity("Domain.Data.Entities.Works", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdministrativeUnitId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Duty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Data.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("ActualStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ActualStatusesId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.HasIndex("ActualStatusesId");

                    b.HasIndex("AddressesId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AdministrativeUnitsWorks", b =>
                {
                    b.HasOne("Domain.Data.Entities.AdministrativeUnits", null)
                        .WithMany()
                        .HasForeignKey("AdministrativeUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Data.Entities.Works", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Data.Entities.Addresses", b =>
                {
                    b.HasOne("Domain.Data.Entities.Blocks", "Blocks")
                        .WithMany("Addresses")
                        .HasForeignKey("BlocksId");

                    b.HasOne("Domain.Data.Entities.Houses", "Houses")
                        .WithMany("Addresses")
                        .HasForeignKey("HousesId");

                    b.HasOne("Domain.Data.Entities.Municipalities", "Municipalities")
                        .WithMany("Addresses")
                        .HasForeignKey("MunicipalitiesId");

                    b.HasOne("Domain.Data.Entities.Neigborhoods", "Neigborhoods")
                        .WithMany("Addresses")
                        .HasForeignKey("NeigborhoodsId");

                    b.HasOne("Domain.Data.Entities.PollCenters", "PollCenters")
                        .WithMany("Addresses")
                        .HasForeignKey("PollCentersId");

                    b.HasOne("Domain.Data.Entities.Streets", "Streets")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetsId");

                    b.HasOne("Domain.Data.Entities.Vilages", "Vilages")
                        .WithMany("Addresses")
                        .HasForeignKey("VilagesId");

                    b.Navigation("Blocks");

                    b.Navigation("Houses");

                    b.Navigation("Municipalities");

                    b.Navigation("Neigborhoods");

                    b.Navigation("PollCenters");

                    b.Navigation("Streets");

                    b.Navigation("Vilages");
                });

            modelBuilder.Entity("Domain.Data.Entities.Blocks", b =>
                {
                    b.HasOne("Domain.Data.Entities.Municipalities", "Municipalities")
                        .WithMany("Blocks")
                        .HasForeignKey("MunicipalitiesId");

                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Domain.Data.Entities.DemandsSpecified", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "AppliactionUsers")
                        .WithMany()
                        .HasForeignKey("AppliactionUsersId");

                    b.Navigation("AppliactionUsers");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralDemands_Users", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "ApplicationUsers")
                        .WithMany("GeneralDemands_Users")
                        .HasForeignKey("ApplicationUsersId");

                    b.HasOne("Domain.Data.Entities.GeneralDemands", "GeneralDemands")
                        .WithMany("GeneralDemands_Users")
                        .HasForeignKey("GeneralDemandsId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("GeneralDemands");
                });

            modelBuilder.Entity("Domain.Data.Entities.Municipalities", b =>
                {
                    b.HasOne("Domain.Data.Entities.Regions", "Regions")
                        .WithMany("Municipalities")
                        .HasForeignKey("RegionsId");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.Data.Entities.Neigborhoods", b =>
                {
                    b.HasOne("Domain.Data.Entities.Municipalities", "Municipalities")
                        .WithMany("Neigborhoods")
                        .HasForeignKey("MunicipalitiesId");

                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Domain.Data.Entities.PollRelated", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Domain.Data.Entities.Helps", "Helps")
                        .WithMany()
                        .HasForeignKey("HelpsId");

                    b.HasOne("Domain.Data.Entities.PoliticalSubjects", "PoliticalSubjects")
                        .WithMany("PollRelateds")
                        .HasForeignKey("PoliticalSubjectsId");

                    b.HasOne("Domain.Data.Entities.SuccessChances", "SuccessChances")
                        .WithMany("PollRelateds")
                        .HasForeignKey("SuccessChancesId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Helps");

                    b.Navigation("PoliticalSubjects");

                    b.Navigation("SuccessChances");
                });

            modelBuilder.Entity("Domain.Data.Entities.Reasons_Users", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "ApplicationUsers")
                        .WithMany("Reasons_Users")
                        .HasForeignKey("ApplicationUsersId");

                    b.HasOne("Domain.Data.Entities.GeneralReasons", "GeneralReasons")
                        .WithMany("Reasons_Users")
                        .HasForeignKey("GeneralReasonsId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("GeneralReasons");
                });

            modelBuilder.Entity("Domain.Data.Entities.SpecificReasons", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId1");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Data.Entities.Streets", b =>
                {
                    b.HasOne("Domain.Data.Entities.StreetSources", "StreetSources")
                        .WithMany("Streets")
                        .HasForeignKey("StreetSourcesId");

                    b.Navigation("StreetSources");
                });

            modelBuilder.Entity("Domain.Data.Entities.Vilages", b =>
                {
                    b.HasOne("Domain.Data.Entities.Municipalities", "Municipalities")
                        .WithMany("Vilages")
                        .HasForeignKey("MunicipalitiesId");

                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Domain.Data.Entities.Works", b =>
                {
                    b.HasOne("Domain.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Data.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Data.Entities.ActualStatuses", null)
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ActualStatusesId");

                    b.HasOne("Domain.Data.Entities.Addresses", null)
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressesId");
                });

            modelBuilder.Entity("Domain.Data.Entities.ActualStatuses", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Domain.Data.Entities.Addresses", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Domain.Data.Entities.Blocks", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralDemands", b =>
                {
                    b.Navigation("GeneralDemands_Users");
                });

            modelBuilder.Entity("Domain.Data.Entities.GeneralReasons", b =>
                {
                    b.Navigation("Reasons_Users");
                });

            modelBuilder.Entity("Domain.Data.Entities.Houses", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.Municipalities", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Blocks");

                    b.Navigation("Neigborhoods");

                    b.Navigation("Vilages");
                });

            modelBuilder.Entity("Domain.Data.Entities.Neigborhoods", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.PoliticalSubjects", b =>
                {
                    b.Navigation("PollRelateds");
                });

            modelBuilder.Entity("Domain.Data.Entities.PollCenters", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.Regions", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("Domain.Data.Entities.Streets", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.StreetSources", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Domain.Data.Entities.SuccessChances", b =>
                {
                    b.Navigation("PollRelateds");
                });

            modelBuilder.Entity("Domain.Data.Entities.Vilages", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("GeneralDemands_Users");

                    b.Navigation("Reasons_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
